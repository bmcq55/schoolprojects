# -*- coding: utf-8 -*-
"""
Created on Tue Sep 22 13:30:05 2020

@author: Brendon McHugh

Question 3 of Lab02

Here, we investigate the interference patterns created by various diffraction 
gratings.
"""

"""
Question 3, Part (b)

Here, we define a function that describes a sinusoidal diffraction grating
"""

# Import numpy and matplotlib
import numpy as np
import matplotlib.pyplot as plt


def sinusoidal(u, z):
    """ 
    Function sinusoidal returns the transmission function of a sinusoidal
    diffraction grating
    
    INPUT:
        u - Position on grating
        z - Slit separation
        
    OUTPUT:
        Transmission function at point u
    """
    alpha = np.pi/z
    return np.sin(alpha*u)**2

# Define slit separation
slit_separation = 20e-6
# Define first transmission function for 
q1 = lambda u: sinusoidal(u, slit_separation)

"""
Question 3, Part (c)

Here, we present the pseudocode and code to calculate the intensity
of the interference pattern generated by a given diffraction grating
"""

# PSEUDOCODE

# Define function I to return intensity of interference pattern at a given point

    # Define N = 1000 sample points
    
    # Define integrand to be numerically integrated, based on diffraction 
    # grating passed as input to function I
    
    # Numerically integrate the integrand using trapezoidal method between
    # -width/2 and width/2 on the diffraction grating, with N = 1000 sample
    # points, and save
    
    # Return the squared absolute value of this integral

# Evaluate function I for the sinusoidal grating q1 as specified in part (b)

# Plot the intensity as a function of x position on screen 

# CODE

def I(x, q, width, lbda, f):
    """ 
    Function I calculates the intensity of the interference pattern
    generated by the diffraction grating given as input
    
    INPUT:
        x - Position on screen
        q - diffraction grating function
        width - width of diffraction grating
        lbda - wavelength of light
        f - focal length of lens
        
    OUTPUT:
        Intensity of diffraction pattern at point x
    """
    # Number of sample points for which to calculate integral
    N = 1000
    
    # Arrays specifying the sample points and weights for trapezoidal method
    sample_points = np.linspace(-width/2, width/2, N+1)
    trap_weights = np.ones(N+1)/N
    trap_weights[0] = 1/(2*N)
    trap_weights[N] = 1/(2*N)
    
    # Integrand to integrate using trapezoidal method
    integrand = lambda u : np.sqrt(q(u))*np.exp(1j*2*np.pi*x*u/(lbda*f))
    
    # Trapezoidal method, and return squared absolute value of integral
    trap_integral = np.sum(trap_weights*integrand(sample_points))
    return np.abs(trap_integral)**2

# Specify the points on screen for which to calculate intensity
x_range = np.linspace(-0.1, 0.1, 1000)

# Specify the number of diffraction slits to simulate
slits = 10
width = slits*slit_separation

# Calculate array of intensity values for each x position on screen
intensity = [I(x, q1, width, 500e-9, 1) for x in x_range]

# Plot intensity vs x value
plt.figure()
plt.plot(x_range,intensity, 'k-')

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Normalized Intensity")

# Set figure title
plt.suptitle("Intensity of Diffraction Pattern vs. Horizontal Screen Position")

# Save figure to file
plt.savefig('DensityPlot_3c.png')

"""
Question 3, Part (d)

Creating density plot of interference pattern
"""

# Define intensity values, values of x and y coordinates
intensity_image = [intensity, intensity]
X = x_range
Y = [0, 1]

# Create density plot of the intensity of the interference pattern
plt.figure()
plt.pcolormesh(X,Y,intensity_image, shading='nearest', cmap='hot', vmax = 0.1)

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Vertical Screen Position [No paricular scale]")

# Create colorbar
plt.colorbar()

# Set figure title
plt.suptitle("Density Plot of Diffraction Pattern")

# Save figure to file
plt.savefig('DensityPlot_3d.png')


"""
Question 3, Part (e)

Here, we create plots of the interference pattern intensity for two other
diffraction grating patterns, 
"""

# PART I

# Define second grating pattern function, q2
slit_separation = 20e-6
q2 = lambda u: sinusoidal(u, slit_separation)*sinusoidal(u,slit_separation*2)

# Specify the points on screen for which to calculate intensity
x_range = np.linspace(-0.1, 0.1, 1000)

# Specify the number of diffraction slits to simulate
slits = 10
width = slits*slit_separation

# Calculate array of intensity values for each x position on screen
intensity = [I(x, q2, width, 500e-9, 1) for x in x_range]


# Creating line plot

# Plot intensity vs x value
plt.figure()
plt.plot(x_range,intensity, 'k-')

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Normalized Intensity")

# Set figure title
plt.suptitle("Intensity of Diffraction Pattern vs. Horizontal Screen Position")

# Save figure to file
plt.savefig('DensityPlot_3e1.png')

# Creating density plot

# Define intensity values, values of x and y coordinates
intensity_image = [intensity, intensity]
X = x_range
Y = [0, 1]

# Create density plot of the intensity of the interference pattern
plt.figure()
plt.pcolormesh(X,Y,intensity_image, shading='nearest', cmap='hot', vmax = 0.1)

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Vertical Screen Position [No paricular scale]")

# Create colorbar
plt.colorbar()

# Set figure title
plt.suptitle("Density Plot of Diffraction Pattern")

# Save figure to file
plt.savefig('DensityPlot_3e2.png')


# PART II

# The following lines define the third diffraction grating pattern, q3
def square(u, umin, umax):
    value = 1*(u<umax)*(u>umin)
    return value

slit_width_1 = 10e-6
slit_width_2 = 20e-6
slit_gap = 60e-6

slit_edge_1 = -(slit_gap+slit_width_1)/2
slit_edge_2 = -(slit_gap-slit_width_1)/2
slit_edge_3 = (slit_gap-slit_width_2)/2
slit_edge_4 = (slit_gap+slit_width_2)/2
q3 = lambda u: square(u, slit_edge_1, slit_edge_2)+square(u,slit_edge_3, slit_edge_4)


# Specify the points on screen for which to calculate intensity
x_range = np.linspace(-0.1, 0.1, 1000)

# Specify the width of diffraction grating to simulate
width = slit_width_1 + slit_width_2 + slit_gap

# Calculate array of intensity values for each x position on screen
intensity = [I(x, q3, width, 500e-9, 1) for x in x_range]


# Creating line plot

# Plot intensity vs x value
plt.figure()
plt.plot(x_range,intensity, 'k-')

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Normalized Intensity")

# Set figure title
plt.suptitle("Intensity of Diffraction Pattern vs. Horizontal Screen Position")

# Save figure to file
plt.savefig('DensityPlot_3e3.png')


# Creating density plot

# Define intensity values, values of x and y coordinates
intensity_image = [intensity, intensity]
X = x_range
Y = [0, 1]

# Create density plot of the intensity of the interference pattern
plt.figure()
plt.pcolormesh(X,Y,intensity_image, shading='nearest', cmap='hot', vmax = 0.1)

# Label x and y axes
plt.xlabel("Horizontal Screen Position (m)")
plt.ylabel("Vertical Screen Position [No paricular scale]")

# Create colorbar
plt.colorbar()

# Set figure title
plt.suptitle("Density Plot of Diffraction Pattern")

# Save figure to file
plt.savefig('DensityPlot_3e4.png')

